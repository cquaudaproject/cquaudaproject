[
    {
        "id": "7983c95b891ec670",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "994e0dea6806a138",
        "type": "debug",
        "z": "7983c95b891ec670",
        "name": "Decoded Packets",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 460,
        "wires": []
    },
    {
        "id": "285a3fef138616d8",
        "type": "inject",
        "z": "7983c95b891ec670",
        "name": "Start Button",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "3a3db74fbdd79409"
            ]
        ]
    },
    {
        "id": "3a3db74fbdd79409",
        "type": "python3-function",
        "z": "7983c95b891ec670",
        "name": "Decoding Packets",
        "func": "import sys\nimport time\nimport serial\nimport scapy.all as scapy\nimport json\n\nmagic_number = 0xa1b2c3d4\nversion_major = 2\nversion_minor = 4\nthiszone = 0\nsigfigs = 0\nsnaplen = 65535\nnetwork = 105\n\nser = serial.Serial('/dev/ttyUSB0', 115200)\ncheck = 0\nwhile check < 3                :\n    line = ser.readline()\n    if b\"<<START>>\" in line:\n        msg1 = {'payload':\"sniffer startted\"}\n        node.send(msg1)\n       \n        check += 1\n    if b\"CONNECTED\" in line:\n        check += 1\n        msg2 = {'payload':\"WiFi Conncted\"}\n        node.send(msg2)\n    if b\"IP ASSIGNED\" in line:\n        check += 1\n        msg3 = {'payload':\"IP Assigned to Esp32\"}\n        node.send(msg3)\n\na = 1\nwhile True:\n    f = open(\"/home/pi/pkt.pcap\", \"wb\")\n    if a > 1:\n        f.write(magic_number.to_bytes(4, byteorder='big'))\n        f.flush()\n        f.write(version_major.to_bytes(2, byteorder='big'))\n        f.flush()\n        f.write(version_minor.to_bytes(2, byteorder='big'))\n        f.flush()\n        f.write(thiszone.to_bytes(4, byteorder='big'))\n        f.flush()\n        f.write(sigfigs.to_bytes(4, byteorder='big'))\n        f.flush()\n        f.write(snaplen.to_bytes(4, byteorder='big'))\n        f.flush()\n        f.write(network.to_bytes(4, byteorder='big'))\n        f.flush()\n    start_t = time.time()\n    while (time.time() - start_t) < 15.0:\n        ch = ser.read()\n        f.write(ch)\n        f.flush()\n    f.close()\n    a = a+1\n    try:    \n        #new_pkt = scapy.rdpcap(\"pkt.cap\")\n        #print(line)\n        #raw_pkt = scapy.raw(pkt)\n        #print(new_pkt.nsummary())\n        #print(assembled_pkt)\n        #scapy.hexdump(pkt)\n        for packet in scapy.PcapReader(\"/home/pi/pkt.pcap\"):\n            try:\n                if packet.haslayer(scapy.Dot11WEP):\n                    packet[scapy.Dot11WEP].decrypt(key=None)\n                    \n                msg4 = {'payload':scapy.hexdump(packet, dump=True)}\n                node.send(msg4)\n                time.sleep(0.5)\n            except Exception as error:\n                msg8 = {'payload':\"Error-2: {}\".format(error)}\n                node.send(msg8)\n    except Exception as e:\n            \n        msg5 = {'payload':\"Error-1: {}\".format(e)}\n        node.send(msg5)\n    time.sleep(1)   \n\nf.close()\nser.close()\nmsg7 = {'payload':\"[+] Done.\"}\nnode.send(msg7)\nreturn\n",
        "outputs": 1,
        "x": 410,
        "y": 400,
        "wires": [
            [
                "e1ea82cbca360f9d"
            ]
        ]
    },
    {
        "id": "3816658ef669727b",
        "type": "catch",
        "z": "7983c95b891ec670",
        "name": "",
        "scope": [
            "3a3db74fbdd79409"
        ],
        "uncaught": false,
        "x": 250,
        "y": 640,
        "wires": [
            [
                "09f7c0c52ed98eb4"
            ]
        ]
    },
    {
        "id": "09f7c0c52ed98eb4",
        "type": "debug",
        "z": "7983c95b891ec670",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 640,
        "wires": []
    },
    {
        "id": "7216e2bd3e65cb0d",
        "type": "mqtt out",
        "z": "7983c95b891ec670",
        "name": "",
        "topic": "Esp32test",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6e78605a7a968653",
        "x": 980,
        "y": 540,
        "wires": []
    },
    {
        "id": "e1ea82cbca360f9d",
        "type": "switch",
        "z": "7983c95b891ec670",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sniffer startted",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "WiFi Conncted",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IP Assigned to Esp32",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 650,
        "y": 400,
        "wires": [
            [
                "085aae0d6a373cc7"
            ],
            [
                "91f60686884fe257"
            ],
            [
                "91f60686884fe257"
            ],
            [
                "91f60686884fe257"
            ],
            [
                "994e0dea6806a138",
                "8f453d59f804d765"
            ]
        ]
    },
    {
        "id": "91f60686884fe257",
        "type": "debug",
        "z": "7983c95b891ec670",
        "name": "WiFi Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 400,
        "wires": []
    },
    {
        "id": "085aae0d6a373cc7",
        "type": "debug",
        "z": "7983c95b891ec670",
        "name": "Decoding Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 340,
        "wires": []
    },
    {
        "id": "8f453d59f804d765",
        "type": "delay",
        "z": "7983c95b891ec670",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 770,
        "y": 540,
        "wires": [
            [
                "7216e2bd3e65cb0d"
            ]
        ]
    },
    {
        "id": "6e78605a7a968653",
        "type": "mqtt-broker",
        "name": "",
        "broker": "203.101.230.120",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    }
]